// Generated by CoffeeScript 1.10.0
(function(window, $, templates) {
  var FETCH_INTERVAL, bindTo, bindables, binder, dataBind, fetch, getBinding, locale, state, stateUrl, update;
  FETCH_INTERVAL = 5000;
  locale = (window.location.pathname.split('/'))[1];
  stateUrl = "/" + locale + "/state/";
  bindables = '*[data-bind]';
  state = {};
  binder = (function() {
    function binder() {
      this.data = void 0;
      this.targets = [];
    }

    binder.prototype.bind = function(element, attribute, path) {
      var existing, i, len, ref, target;
      ref = this.targets;
      for (i = 0, len = ref.length; i < len; i++) {
        existing = ref[i];
        if (existing.element === element) {
          return;
        }
      }
      target = {
        element: element,
        attribute: attribute,
        path: path
      };
      return this.targets.push(target);
    };

    binder.prototype.updateDom = function(data) {
      var extractor, i, len, ref, results, target, value;
      ref = this.targets;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        target = ref[i];
        if (target.path) {
          extractor = function(src, key) {
            return src[key];
          };
          value = target.path.reduce(extractor, data);
        } else {
          value = data;
        }
        if (target.attribute === 'text') {
          results.push(target.element.text(value));
        } else if (target.attribute === 'html') {
          results.push(target.element.html(value));
        } else {
          results.push(target.element.attr(target.attribute, value));
        }
      }
      return results;
    };

    binder.prototype.set = function(data) {
      this.data = data;
      return this.updateDom(data);
    };

    binder.prototype.get = function() {
      return this.data;
    };

    return binder;

  })();
  getBinding = function(key) {
    var instance;
    instance = state[key];
    if (instance == null) {
      instance = new binder();
      state[key] = instance;
    }
    return instance;
  };
  update = function(data) {
    var instance, key, results, value;
    results = [];
    for (key in data) {
      value = data[key];
      instance = getBinding(key);
      results.push(instance.set(value));
    }
    return results;
  };
  fetch = function() {
    var res;
    res = $.get(stateUrl);
    res.done(function(data) {
      update(data);
      return setTimeout(fetch, FETCH_INTERVAL);
    });
    return res.fail(function() {
      console.log('State synchronization failed.');
      return setTimeout(fetch, FETCH_INTERVAL);
    });
  };
  bindTo = function(element) {
    var components, instance, key, segments, target;
    target = element.data('bind');
    components = target.split(/:(.+)/);
    segments = components[1].split('.');
    key = segments[0].trim();
    instance = getBinding(key);
    return instance.bind(element, components[0], segments.slice(1));
  };
  dataBind = function() {
    return $(bindables).each(function() {
      var element;
      element = $(this);
      return bindTo(element);
    });
  };
  $(document).on('data-bind', dataBind);
  dataBind();
  return setTimeout(fetch, FETCH_INTERVAL);
})(this, this.jQuery, this.templates);
