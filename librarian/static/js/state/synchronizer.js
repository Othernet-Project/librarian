// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function(window, $, templates) {
  var FETCH_INTERVAL, fetch, locale, provider, registry, stateUrl, update;
  FETCH_INTERVAL = 5000;
  locale = (window.location.pathname.split('/'))[1];
  stateUrl = "/" + locale + "/state/";
  window.state = {};
  registry = {};
  window.state.get = function(name) {
    var config, instance;
    instance = registry[name];
    if (instance == null) {
      instance = new provider();
      registry[name] = instance;
      config = {
        get: instance.get
      };
      Object.defineProperty(window.state, name, config);
    }
    return instance;
  };
  provider = (function() {
    function provider() {
      this.extend = bind(this.extend, this);
      this.onchange = bind(this.onchange, this);
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      this.invokeCallbacks = bind(this.invokeCallbacks, this);
      this.data = void 0;
      this.callbacks = [];
    }

    provider.prototype.invokeCallbacks = function() {
      var fn, i, len, ref, results;
      ref = this.callbacks;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        fn = ref[i];
        results.push(fn(this));
      }
      return results;
    };

    provider.prototype.set = function(data) {
      this.data = data;
      return this.invokeCallbacks();
    };

    provider.prototype.get = function() {
      return this.data;
    };

    provider.prototype.onchange = function(callback) {
      if ($.inArray(callback, this.callbacks) === -1) {
        return this.callbacks.push(callback);
      }
    };

    provider.prototype.extend = function(properties) {
      var fn, key, results, updater;
      results = [];
      for (key in properties) {
        fn = properties[key];
        updater = function(provider) {
          var data;
          data = provider.get();
          return data[key] = fn(data);
        };
        results.push(this.onchange(updater));
      }
      return results;
    };

    return provider;

  })();
  update = function(data) {
    var instance, key, results, value;
    results = [];
    for (key in data) {
      value = data[key];
      instance = window.state.get(key);
      results.push(instance.set(value));
    }
    return results;
  };
  fetch = function() {
    var res;
    res = $.get(stateUrl);
    res.done(function(data) {
      update(data);
      return setTimeout(fetch, FETCH_INTERVAL);
    });
    return res.fail(function() {
      console.log('State synchronization failed.');
      return setTimeout(fetch, FETCH_INTERVAL);
    });
  };
  return setTimeout(fetch, FETCH_INTERVAL);
})(this, this.jQuery, this.templates);
