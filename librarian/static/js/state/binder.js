// Generated by CoffeeScript 1.10.0
(function(window, $, templates) {
  var bindTo, bindables, binder, bindingIds, bindings, dataBind;
  bindables = '*[data-bind]';
  bindings = {};
  bindingIds = 0;
  binder = (function() {
    function binder(element, elementAttribute, provider, dataPath) {
      this.element = element;
      this.elementAttribute = elementAttribute;
      this.provider = provider;
      this.dataPath = dataPath;
      this.provider.onchange(this.updateDom.bind(this));
    }

    binder.prototype.updateDom = function(provider) {
      var data, extractor, value;
      data = provider.get();
      if (this.dataPath.length > 0) {
        extractor = function(src, key) {
          return src[key];
        };
        value = this.dataPath.reduce(extractor, data);
      } else {
        value = data;
      }
      if (this.elementAttribute === 'text') {
        return this.element.text(value);
      } else if (this.elementAttribute === 'html') {
        return this.element.html(value);
      } else {
        return this.element.attr(this.elementAttribute, value);
      }
    };

    return binder;

  })();
  bindTo = function(element, bindingId) {
    var components, dataPath, elementAttribute, instance, provider, providerName, segments, target;
    target = element.data('bind');
    components = target.split(/:(.+)/);
    elementAttribute = components[0].trim();
    segments = components[1].trim().split('.');
    providerName = segments[0];
    dataPath = segments.slice(1);
    provider = window.state.get(providerName);
    instance = new binder(element, elementAttribute, provider, dataPath);
    return bindings[bindingId] = instance;
  };
  dataBind = function() {
    return $(bindables).each(function() {
      var element;
      element = $(this);
      if ((element.data('binding-id')) == null) {
        element.data('binding-id', ++bindingIds);
        return bindTo(element, bindingIds);
      }
    });
  };
  $(document).on('data-bind', dataBind);
  return dataBind();
})(this, this.jQuery, this.templates);
