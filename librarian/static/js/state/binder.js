// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function(window, $, templates) {
  var bindTo, bindables, binder, bindingIds, bindings, catchProvider, dataBind, safeEval;
  bindables = '*[data-bind]';
  bindings = {};
  bindingIds = 0;
  safeEval = function(expression, context) {
    var body, fn;
    body = "with(context) { return " + expression + "; }";
    fn = new Function('context', body);
    return fn(context);
  };
  binder = (function() {
    function binder(element, elementAttribute, provider, expression) {
      this.updateDom = bind(this.updateDom, this);
      this.element = element;
      this.elementAttribute = elementAttribute;
      this.provider = provider;
      this.expression = expression;
      this.provider.onchange(this.updateDom);
    }

    binder.prototype.updateDom = function(provider) {
      var value;
      value = safeEval(this.expression, window.state);
      if (this.elementAttribute === 'text') {
        return this.element.text(value);
      } else if (this.elementAttribute === 'html') {
        return this.element.html(value);
      } else if (this.elementAttribute === 'style') {
        return this.element.css(value);
      } else {
        return this.element.attr(this.elementAttribute, value);
      }
    };

    return binder;

  })();
  catchProvider = function(expression) {
    var accessed, collector, e, error, name;
    accessed = [];
    collector = function(name) {
      if (accessed.indexOf(name === -1)) {
        return accessed.push(name);
      }
    };
    window.state.__trapper__ = collector;
    try {
      safeEval(expression, window.state);
    } catch (error) {
      e = error;
      if (e instanceof ReferenceError) {
        name = e.message.split(' ')[0];
        accessed.push(name);
      }
    }
    window.state.__trapper__ = null;
    if (accessed.length !== 1) {
      throw new Error("Either none or multiple providers were trapped.");
    }
    return accessed[0];
  };
  bindTo = function(element, bindingId) {
    var components, elementAttribute, expression, instance, provider, providerName, target;
    target = element.data('bind');
    components = target.split(/:(.+)/);
    elementAttribute = components[0].trim();
    expression = components[1].trim();
    providerName = catchProvider(expression);
    provider = window.state.get(providerName);
    instance = new binder(element, elementAttribute, provider, expression);
    return bindings[bindingId] = instance;
  };
  dataBind = function() {
    return $(bindables).each(function() {
      var element;
      element = $(this);
      if ((element.data('binding-id')) == null) {
        element.data('binding-id', ++bindingIds);
        return bindTo(element, bindingIds);
      }
    });
  };
  $(document).on('data-bind', dataBind);
  return dataBind();
})(this, this.jQuery, this.templates);
