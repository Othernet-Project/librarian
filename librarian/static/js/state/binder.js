// Generated by CoffeeScript 1.10.0
(function(window, $, templates) {
  var bindTo, bindables, binder, bindingIds, bindings, dataBind;
  bindables = '*[data-bind]';
  bindings = {};
  bindingIds = 0;
  binder = (function() {
    function binder(element, elementAttribute, provider, expression) {
      this.element = element;
      this.elementAttribute = elementAttribute;
      this.provider = provider;
      this.expression = expression;
      this.provider.onchange(this.updateDom.bind(this));
    }

    binder.prototype.updateDom = function(provider) {
      var body, fn, value;
      body = "with(state) { return " + this.expression + "; }";
      fn = new Function('state', body);
      value = fn(window.state);
      if (this.elementAttribute === 'text') {
        return this.element.text(value);
      } else if (this.elementAttribute === 'html') {
        return this.element.html(value);
      } else {
        return this.element.attr(this.elementAttribute, value);
      }
    };

    return binder;

  })();
  bindTo = function(element, bindingId) {
    var components, elementAttribute, expression, instance, match, provider, providerName, target;
    target = element.data('bind');
    components = target.split(/:(.+)/);
    elementAttribute = components[0].trim();
    expression = components[1].trim();
    match = expression.match(/(.+\(\)).+/);
    if (match.length !== 2) {
      throw new Error("Invalid binding: " + target);
    }
    providerName = match[1].replace("()", "");
    provider = window.state.get(providerName);
    instance = new binder(element, elementAttribute, provider, expression);
    return bindings[bindingId] = instance;
  };
  dataBind = function() {
    return $(bindables).each(function() {
      var element;
      element = $(this);
      if ((element.data('binding-id')) == null) {
        element.data('binding-id', ++bindingIds);
        return bindTo(element, bindingIds);
      }
    });
  };
  $(document).on('data-bind', dataBind);
  return dataBind();
})(this, this.jQuery, this.templates);
